{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function matches(hint, typed, matchInMiddle) {\n    if (matchInMiddle) return hint.indexOf(typed) >= 0;else return hint.lastIndexOf(typed, 0) == 0;\n  }\n\n  function getHints(cm, options) {\n    var tags = options && options.schemaInfo;\n    var quote = options && options.quoteChar || '\"';\n    var matchInMiddle = options && options.matchInMiddle;\n    if (!tags) return;\n    var cur = cm.getCursor(),\n        token = cm.getTokenAt(cur);\n\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var inner = CodeMirror.innerMode(cm.getMode(), token.state);\n    if (!inner.mode.xmlCurrentTag) return;\n    var result = [],\n        replaceToken = false,\n        prefix;\n    var tag = /\\btag\\b/.test(token.type) && !/>$/.test(token.string);\n    var tagName = tag && /^\\w/.test(token.string),\n        tagStart;\n\n    if (tagName) {\n      var before = cm.getLine(cur.line).slice(Math.max(0, token.start - 2), token.start);\n      var tagType = /<\\/$/.test(before) ? \"close\" : /<$/.test(before) ? \"open\" : null;\n      if (tagType) tagStart = token.start - (tagType == \"close\" ? 2 : 1);\n    } else if (tag && token.string == \"<\") {\n      tagType = \"open\";\n    } else if (tag && token.string == \"</\") {\n      tagType = \"close\";\n    }\n\n    var tagInfo = inner.mode.xmlCurrentTag(inner.state);\n\n    if (!tag && !tagInfo || tagType) {\n      if (tagName) prefix = token.string;\n      replaceToken = tagType;\n      var context = inner.mode.xmlCurrentContext ? inner.mode.xmlCurrentContext(inner.state) : [];\n      var inner = context.length && context[context.length - 1];\n      var curTag = inner && tags[inner];\n      var childList = inner ? curTag && curTag.children : tags[\"!top\"];\n\n      if (childList && tagType != \"close\") {\n        for (var i = 0; i < childList.length; ++i) if (!prefix || matches(childList[i], prefix, matchInMiddle)) result.push(\"<\" + childList[i]);\n      } else if (tagType != \"close\") {\n        for (var name in tags) if (tags.hasOwnProperty(name) && name != \"!top\" && name != \"!attrs\" && (!prefix || matches(name, prefix, matchInMiddle))) result.push(\"<\" + name);\n      }\n\n      if (inner && (!prefix || tagType == \"close\" && matches(inner, prefix, matchInMiddle))) result.push(\"</\" + inner + \">\");\n    } else {\n      // Attribute completion\n      var curTag = tagInfo && tags[tagInfo.name],\n          attrs = curTag && curTag.attrs;\n      var globalAttrs = tags[\"!attrs\"];\n      if (!attrs && !globalAttrs) return;\n\n      if (!attrs) {\n        attrs = globalAttrs;\n      } else if (globalAttrs) {\n        // Combine tag-local and global attributes\n        var set = {};\n\n        for (var nm in globalAttrs) if (globalAttrs.hasOwnProperty(nm)) set[nm] = globalAttrs[nm];\n\n        for (var nm in attrs) if (attrs.hasOwnProperty(nm)) set[nm] = attrs[nm];\n\n        attrs = set;\n      }\n\n      if (token.type == \"string\" || token.string == \"=\") {\n        // A value\n        var before = cm.getRange(Pos(cur.line, Math.max(0, cur.ch - 60)), Pos(cur.line, token.type == \"string\" ? token.start : token.end));\n        var atName = before.match(/([^\\s\\u00a0=<>\\\"\\']+)=$/),\n            atValues;\n        if (!atName || !attrs.hasOwnProperty(atName[1]) || !(atValues = attrs[atName[1]])) return;\n        if (typeof atValues == 'function') atValues = atValues.call(this, cm); // Functions can be used to supply values for autocomplete widget\n\n        if (token.type == \"string\") {\n          prefix = token.string;\n          var n = 0;\n\n          if (/['\"]/.test(token.string.charAt(0))) {\n            quote = token.string.charAt(0);\n            prefix = token.string.slice(1);\n            n++;\n          }\n\n          var len = token.string.length;\n\n          if (/['\"]/.test(token.string.charAt(len - 1))) {\n            quote = token.string.charAt(len - 1);\n            prefix = token.string.substr(n, len - 2);\n          }\n\n          if (n) {\n            // an opening quote\n            var line = cm.getLine(cur.line);\n            if (line.length > token.end && line.charAt(token.end) == quote) token.end++; // include a closing quote\n          }\n\n          replaceToken = true;\n        }\n\n        function returnHintsFromAtValues(atValues) {\n          if (atValues) for (var i = 0; i < atValues.length; ++i) if (!prefix || matches(atValues[i], prefix, matchInMiddle)) result.push(quote + atValues[i] + quote);\n          return returnHints();\n        }\n\n        if (atValues && atValues.then) return atValues.then(returnHintsFromAtValues);\n        return returnHintsFromAtValues(atValues);\n      } else {\n        // An attribute name\n        if (token.type == \"attribute\") {\n          prefix = token.string;\n          replaceToken = true;\n        }\n\n        for (var attr in attrs) if (attrs.hasOwnProperty(attr) && (!prefix || matches(attr, prefix, matchInMiddle))) result.push(attr);\n      }\n    }\n\n    function returnHints() {\n      return {\n        list: result,\n        from: replaceToken ? Pos(cur.line, tagStart == null ? token.start : tagStart) : cur,\n        to: replaceToken ? Pos(cur.line, token.end) : cur\n      };\n    }\n\n    return returnHints();\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"xml\", getHints);\n});","map":{"version":3,"sources":["/Users/jevlopez/Documents/React-CodePen-Clone/node_modules/codemirror/addon/hint/xml-hint.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Pos","matches","hint","typed","matchInMiddle","indexOf","lastIndexOf","getHints","cm","options","tags","schemaInfo","quote","quoteChar","cur","getCursor","token","getTokenAt","end","ch","string","slice","start","inner","innerMode","getMode","state","mode","xmlCurrentTag","result","replaceToken","prefix","tag","test","type","tagName","tagStart","before","getLine","line","Math","max","tagType","tagInfo","context","xmlCurrentContext","length","curTag","childList","children","i","push","name","hasOwnProperty","attrs","globalAttrs","set","nm","getRange","atName","match","atValues","call","n","charAt","len","substr","returnHintsFromAtValues","returnHints","then","attr","list","from","to","registerHelper"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function matches(hint, typed, matchInMiddle) {\n    if (matchInMiddle) return hint.indexOf(typed) >= 0;\n    else return hint.lastIndexOf(typed, 0) == 0;\n  }\n\n  function getHints(cm, options) {\n    var tags = options && options.schemaInfo;\n    var quote = (options && options.quoteChar) || '\"';\n    var matchInMiddle = options && options.matchInMiddle;\n    if (!tags) return;\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n    var inner = CodeMirror.innerMode(cm.getMode(), token.state);\n    if (!inner.mode.xmlCurrentTag) return\n    var result = [], replaceToken = false, prefix;\n    var tag = /\\btag\\b/.test(token.type) && !/>$/.test(token.string);\n    var tagName = tag && /^\\w/.test(token.string), tagStart;\n\n    if (tagName) {\n      var before = cm.getLine(cur.line).slice(Math.max(0, token.start - 2), token.start);\n      var tagType = /<\\/$/.test(before) ? \"close\" : /<$/.test(before) ? \"open\" : null;\n      if (tagType) tagStart = token.start - (tagType == \"close\" ? 2 : 1);\n    } else if (tag && token.string == \"<\") {\n      tagType = \"open\";\n    } else if (tag && token.string == \"</\") {\n      tagType = \"close\";\n    }\n\n    var tagInfo = inner.mode.xmlCurrentTag(inner.state)\n    if (!tag && !tagInfo || tagType) {\n      if (tagName)\n        prefix = token.string;\n      replaceToken = tagType;\n      var context = inner.mode.xmlCurrentContext ? inner.mode.xmlCurrentContext(inner.state) : []\n      var inner = context.length && context[context.length - 1]\n      var curTag = inner && tags[inner]\n      var childList = inner ? curTag && curTag.children : tags[\"!top\"];\n      if (childList && tagType != \"close\") {\n        for (var i = 0; i < childList.length; ++i) if (!prefix || matches(childList[i], prefix, matchInMiddle))\n          result.push(\"<\" + childList[i]);\n      } else if (tagType != \"close\") {\n        for (var name in tags)\n          if (tags.hasOwnProperty(name) && name != \"!top\" && name != \"!attrs\" && (!prefix || matches(name, prefix, matchInMiddle)))\n            result.push(\"<\" + name);\n      }\n      if (inner && (!prefix || tagType == \"close\" && matches(inner, prefix, matchInMiddle)))\n        result.push(\"</\" + inner + \">\");\n    } else {\n      // Attribute completion\n      var curTag = tagInfo && tags[tagInfo.name], attrs = curTag && curTag.attrs;\n      var globalAttrs = tags[\"!attrs\"];\n      if (!attrs && !globalAttrs) return;\n      if (!attrs) {\n        attrs = globalAttrs;\n      } else if (globalAttrs) { // Combine tag-local and global attributes\n        var set = {};\n        for (var nm in globalAttrs) if (globalAttrs.hasOwnProperty(nm)) set[nm] = globalAttrs[nm];\n        for (var nm in attrs) if (attrs.hasOwnProperty(nm)) set[nm] = attrs[nm];\n        attrs = set;\n      }\n      if (token.type == \"string\" || token.string == \"=\") { // A value\n        var before = cm.getRange(Pos(cur.line, Math.max(0, cur.ch - 60)),\n                                 Pos(cur.line, token.type == \"string\" ? token.start : token.end));\n        var atName = before.match(/([^\\s\\u00a0=<>\\\"\\']+)=$/), atValues;\n        if (!atName || !attrs.hasOwnProperty(atName[1]) || !(atValues = attrs[atName[1]])) return;\n        if (typeof atValues == 'function') atValues = atValues.call(this, cm); // Functions can be used to supply values for autocomplete widget\n        if (token.type == \"string\") {\n          prefix = token.string;\n          var n = 0;\n          if (/['\"]/.test(token.string.charAt(0))) {\n            quote = token.string.charAt(0);\n            prefix = token.string.slice(1);\n            n++;\n          }\n          var len = token.string.length;\n          if (/['\"]/.test(token.string.charAt(len - 1))) {\n            quote = token.string.charAt(len - 1);\n            prefix = token.string.substr(n, len - 2);\n          }\n          if (n) { // an opening quote\n            var line = cm.getLine(cur.line);\n            if (line.length > token.end && line.charAt(token.end) == quote) token.end++; // include a closing quote\n          }\n          replaceToken = true;\n        }\n        function returnHintsFromAtValues(atValues) {\n          if (atValues)\n            for (var i = 0; i < atValues.length; ++i) if (!prefix || matches(atValues[i], prefix, matchInMiddle))\n              result.push(quote + atValues[i] + quote);\n          return returnHints();\n        }\n        if (atValues && atValues.then) return atValues.then(returnHintsFromAtValues);\n        return returnHintsFromAtValues(atValues);\n      } else { // An attribute name\n        if (token.type == \"attribute\") {\n          prefix = token.string;\n          replaceToken = true;\n        }\n        for (var attr in attrs) if (attrs.hasOwnProperty(attr) && (!prefix || matches(attr, prefix, matchInMiddle)))\n          result.push(attr);\n      }\n    }\n    function returnHints() {\n      return {\n        list: result,\n        from: replaceToken ? Pos(cur.line, tagStart == null ? token.start : tagStart) : cur,\n        to: replaceToken ? Pos(cur.line, token.end) : cur\n      };\n    }\n    return returnHints();\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"xml\", getHints);\n});\n"]},"metadata":{},"sourceType":"script"}